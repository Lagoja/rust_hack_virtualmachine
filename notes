//Push Constant 10 to the stack
PUSH
0	@10  //Get the value
1	D=A   
2	@SP   // Push D to the stack
3	A=M
4	M=D  
5	@SP  //Increment the pointer
6	M=M+1

//Pop a Value off the Stack
POP
7	@SP
8	AM=M-1
9	D=M
10	M=0


//Put the value in segment local[2]
@LCL
D=M
@2
D=D+A  <- the local[2] address
@R13
M=D <-Store the address
POP
@R13
A=M <- Retrieve the address
M=D <- Push the value to the address

//Get the value from a segment local 
@LCL
D=M
@2
A=D+A
A=M
PUSH


//Comparison
// Store y value in D, x value in A
- GetOperand
D=M-D
@BRANCH1
D;JEQ
@0  //Get the value
D=A   
@SP   // Push D to the stack
A=M
M=D  
@SP  //Increment the pointer
M=M+1
(BRANCH1END)
(BRANCH1)
@65535  //Get the value
D=A   
@SP   // Push D to the stack
A=M
M=D  
@SP  //Increment the pointer
M=M+1
(BRANCH1END)

//If GOTO
//Pop value to D
@SP
AM=M-1
D=M
M=0
@LABEL
D;JGT

//Call g nargs
// Assume args are already pushed onto the stack
@RETURN{g}
 -> PUSH_FROM_M
@LCL
 -> PUSH_FROM_M
@ARG 
 -> PUSH_FROM_M
@THIS
 -> PUSH_FROM_M
@THAT 
 -> PUSH_FROM_M
@SP  //set Arg = SP-NARGS-5
D=M
@{nargs + 5}
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
 -> GOTO(G)
(RETURN{g})

//Return
//frame = LCL
@LCL
D=M
@R14 //frame
M=D
//Retaddr = frame -5
@5
D=D-A
@R15 //retAddr
M=D
POP(ARG,0)
//SP = Arg + 1
@ARG
D=M+1
@SP
M=D
//Restore THAT
@R14
AM=M-1
D=M
@THAT
M=D
@R14
AM=M-1
D=M
@THIS
M=D
@R14
AM=M-1
D=M
@ARG
M=D
@R14
AM=M-1
D=M
@LCL
M=D
@R15
A=M
0;JMP